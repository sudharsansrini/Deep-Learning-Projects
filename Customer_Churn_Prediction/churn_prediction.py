# -*- coding: utf-8 -*-
"""Churn_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wItvT0gwYu1QrYW6DXVP4LRcAzl10U6q
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


dataset = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')
print(dataset.head(5))
print(dataset.shape)
print(dataset.describe)

dataset = dataset.drop('customerID', axis='columns')

for i in dataset.columns:
  print(f'{i} : {dataset[i].dtype}')

for i in dataset.columns:
  print(f'{i} : {dataset[i].unique()}')

print(dataset[pd.to_numeric(dataset.TotalCharges, errors='coerce').isnull()])

dataset1 = dataset[dataset.TotalCharges != '']
dataset1.TotalCharges = pd.to_numeric(dataset.TotalCharges, errors='coerce')

dataset['MonthlyCharges'].isnull().unique()

for i in dataset1.columns:
  print(f'{i} : {dataset1[i].dtype}')

for i in dataset1.columns:

  if dataset1[i].dtype == 'object':
      print(f'{i} : {dataset1[i].unique()}')

label=[]
for i in dataset1.columns:

  if dataset1[i].dtype == 'object':
      label.append(i)

print(label)

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

for i in label:
  dataset1[i] = label_encoder.fit_transform(dataset1[i])

dataset1.head(10)

for i in dataset1.columns:
  print(f'{i} : {dataset1[i].dtype}')

from sklearn.preprocessing import MinMaxScaler

sc = MinMaxScaler()

cols = ['tenure', 'MonthlyCharges','TotalCharges']
dataset1[cols] = sc.fit_transform(dataset1[cols])
dataset1[cols]

dataset1.head(10)

x = dataset1.iloc[:, :-1]
y = dataset1.iloc[:, -1]

print(x.shape)
print(y.shape)


x['TotalCharges'] = x['TotalCharges'].fillna(x['TotalCharges'].mean())


print(x.isna().any())

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)

print(x_train.shape)
print(y_train.shape)

import tensorflow as tf
from tensorflow import keras

model = keras.Sequential([
                          keras.layers.Dense(10, input_shape=(19, ), activation='relu'),
                          # keras.layers.Dense(11, activation='relu'),
                          keras.layers.Dense(1, activation='sigmoid')
                        
])

model.compile(
    optimizer='adam',
    loss = 'binary_crossentropy',
    metrics=['accuracy']
)

model.fit(x_train, y_train, epochs=100)

print(np.any(np.isnan(x_test)))
print(np.any(np.isnan(y_test)))
print(np.any(np.isnan(x_train)))
print(np.any(np.isnan(y_train)))

model.evaluate(x_test, y_test)

y_pred = model.predict(x_test)
y_pred = np.array(y_pred)
y_test = np.array(y_test)
np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1)

y_final=[]
for i in y_pred:
  if i < 0.5:
    y_final.append(0)
  else:
    y_final.append(1)

y_final =np.array(y_final)

y_final

from sklearn.metrics import accuracy_score, confusion_matrix

cm = confusion_matrix(y_test, y_final)
print(cm)

print('Accuracy :{0}'.format(accuracy_score(y_test, y_final)*100))

import seaborn as sn
plt.figure(figsize=(10,10))
sn.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')
plt.show()